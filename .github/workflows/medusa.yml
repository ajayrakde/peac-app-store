name: Deploy Medusa to Azure Container Apps

on:
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Medusa Deployment
    environment: SBX
    env:
      RESOURCE_GROUP: "rg-kanhaa-app-store"
      ACR_NAME: "acrkanhaaappstore"
      ENVIRONMENT_NAME: "SBX"
      REGISTRY_SERVER: ${{ vars.ACR_NAME }}.azurecr.io
      IMAGE_TAG: medusa:${{ github.sha }}
      IMAGE_URI: ${{ vars.ACR_NAME }}.azurecr.io/medusa:${{ github.sha }}
      KEY_VAULT_NAME: "kv-kanhaa-app-store"
      STORE_CORS: "http://localhost:3000"
      ADMIN_CORS: "http://localhost:7000"
      AUTH_CORS: "http://localhost:3000,http://localhost:7000"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Generate and store JWT_SECRET and COOKIE_SECRET in Key Vault if missing
        shell: bash
        env:
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          KEY_VAULT_NAME: kv-kanhaa-app-store  # Adjust as needed
        run: |
          if ! az keyvault secret show --vault-name $KEY_VAULT_NAME --name JWT-SECRET &> /dev/null; then
            JWT_SECRET=$(openssl rand -hex 32)
            az keyvault secret set --vault-name $KEY_VAULT_NAME --name JWT-SECRET --value "$JWT_SECRET"
          fi
          if ! az keyvault secret show --vault-name $KEY_VAULT_NAME --name COOKIE-SECRET &> /dev/null; then
            COOKIE_SECRET=$(openssl rand -hex 32)
            az keyvault secret set --vault-name $KEY_VAULT_NAME --name COOKIE-SECRET --value "$COOKIE_SECRET"
          fi

      - name: Deploy medusa-server
        uses: azure/container-apps-deploy-action@v1
        with:
          acrName: ${{ env.ACR_NAME }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          containerAppName: medusa-server
          containerAppEnvironment: ${{ env.ENVIRONMENT_NAME }}
          registryUrl: ${{ env.REGISTRY_SERVER }}
          imageToDeploy: ${{ env.IMAGE_URI }}
          yamlConfigPath: ./configs/medusa-config.yaml
          environmentVariables: |
            - name: MEDUSA_WORKER_MODE
              value: "server"
            - name: DISABLE_MEDUSA_ADMIN
              value: "false"

      - name: Assign system-assigned managed identity to medusa-server
        run: |
          az containerapp identity assign --name medusa-server --resource-group ${{ env.RESOURCE_GROUP }}

      - name: Grant Key Vault Secrets User role to medusa-server managed identity
        run: |
          PRINCIPAL_ID=$(az containerapp show --name medusa-server --resource-group ${{ env.RESOURCE_GROUP }} --query identity.principalId -o tsv)
          az role assignment create --assignee $PRINCIPAL_ID --role "Key Vault Administrator" --scope "/subscriptions/6a324482-7a11-4ff0-8540-48ccd816e396/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/kv-kanhaa-app-store" || echo "Role assignment exists or error ignored"

      - name: Deploy medusa-worker
        uses: azure/container-apps-deploy-action@v1
        with:
          acrName: ${{ env.ACR_NAME }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          containerAppName: medusa-worker
          containerAppEnvironment: ${{ env.ENVIRONMENT_NAME }}
          registryUrl: ${{ env.REGISTRY_SERVER }}
          imageToDeploy: ${{ env.IMAGE_URI }}
          yamlConfigPath: ./configs/medusa-config.yaml
          environmentVariables: |
            - name: MEDUSA_WORKER_MODE
              value: "worker"
            - name: DISABLE_MEDUSA_ADMIN
              value: "true"

      - name: Assign system-assigned managed identity to medusa-worker
        run: |
          az containerapp identity assign --name medusa-worker --resource-group ${{ env.RESOURCE_GROUP }}

      - name: Grant Key Vault Secrets User role to medusa-worker managed identity
        run: |
          PRINCIPAL_ID=$(az containerapp show --name medusa-worker --resource-group ${{ env.RESOURCE_GROUP }} --query identity.principalId -o tsv)
          az role assignment create --assignee $PRINCIPAL_ID --role "Key Vault Administrator" --scope "/subscriptions/6a324482-7a11-4ff0-8540-48ccd816e396/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/kv-kanhaa-app-store" || echo "Role assignment exists or error ignored"
