name: Deploy to Azure Container Apps

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Target environment
        required: true
        default: dev
        type: choice
        options:
          - dev
          - prd

env:
  ENV: ${{ github.event.inputs.environment }}

jobs:
  # Step 1: Create/validate all infrastructure
  infra:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    outputs:
      client_id: ${{ steps.sp.outputs.client_id }}
      tenant_id: ${{ steps.sp.outputs.tenant_id }}
      subscription_id: ${{ steps.sp.outputs.sub_id }}
      client_secret: ${{ steps.sp.outputs.client_secret }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Extract Service Principal details
        id: sp
        run: |
          CREDS='${{ secrets.AZURE_CREDENTIALS }}'
          echo "client_id=$(echo $CREDS | jq -r .clientId)" >> $GITHUB_OUTPUT
          echo "tenant_id=$(echo $CREDS | jq -r .tenantId)" >> $GITHUB_OUTPUT
          echo "sub_id=$(echo $CREDS | jq -r .subscriptionId)" >> $GITHUB_OUTPUT
          echo "client_secret=$(echo $CREDS | jq -r .clientSecret)" >> $GITHUB_OUTPUT

      - name: Create or validate Azure resources
        run: |
          az group create --name "$ENV-${{ secrets.RESOURCE_GROUP }}" --location centralIndia
          az acr show --name "$ENV-${{ secrets.ACR_NAME }}" --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" || \
            az acr create --name "$ENV-${{ secrets.ACR_NAME }}" --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" --sku Basic
          az keyvault show --name "$ENV-${{ secrets.KEY_VAULT_NAME }}" --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" || \
            az keyvault create --name "$ENV-${{ secrets.KEY_VAULT_NAME }}" --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" --location ${{ secrets.LOCATION }}
          az containerapp env show --name "$ENV-${{ secrets.APP_ENV }}" --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" || \
            az containerapp env create --name "$ENV-${{ secrets.APP_ENV }}" --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" --location ${{ secrets.LOCATION }}
          az containerapp show --name "$ENV-${{ secrets.CONTAINER_APP_NAME }}" --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" || \
            az containerapp create --name "$ENV-${{ secrets.CONTAINER_APP_NAME }}" --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" --environment "$ENV-${{ secrets.APP_ENV }}" --image mcr.microsoft.com/azuredocs/containerapps-helloworld:latest --ingress external --target-port 80

      - name: Assign RBAC roles to Service Principal
        run: |
          SUB_ID=${{ steps.sp.outputs.sub_id }}
          CLIENT_ID=${{ steps.sp.outputs.client_id }}
          az role assignment create --assignee $CLIENT_ID --role Contributor --scope /subscriptions/$SUB_ID/resourceGroups/$ENV-${{ secrets.RESOURCE_GROUP }}
          ACR_ID=$(az acr show -n "$ENV-${{ secrets.ACR_NAME }}" --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" --query id -o tsv)
          az role assignment create --assignee $CLIENT_ID --role AcrPush --scope $ACR_ID
          KV_ID=$(az keyvault show -n "$ENV-${{ secrets.KEY_VAULT_NAME }}" --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" --query id -o tsv)
          az role assignment create --assignee $CLIENT_ID --role "Key Vault Secrets User" --scope $KV_ID

  # Step 2: Upload secrets to Key Vault
  keyvault:
    needs: infra
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Store service principal credentials in Key Vault
        run: |
          az keyvault secret set --vault-name "$ENV-${{ secrets.KEY_VAULT_NAME }}" --name azure-client-id --value '${{ needs.infra.outputs.client_id }}' --output none
          az keyvault secret set --vault-name "$ENV-${{ secrets.KEY_VAULT_NAME }}" --name azure-client-secret --value '${{ needs.infra.outputs.client_secret }}' --output none
          az keyvault secret set --vault-name "$ENV-${{ secrets.KEY_VAULT_NAME }}" --name azure-tenant-id --value '${{ needs.infra.outputs.tenant_id }}' --output none

      - name: Upload GitHub Secrets to Key Vault
        env:
          ALL_SECRETS: ${{ toJson(secrets) }}
          KEY_VAULT: $ENV-${{ secrets.KEY_VAULT_NAME }}
        run: |
          for key in $(echo "$ALL_SECRETS" | jq -r 'to_entries[] | select(.key != "AZURE_CREDENTIALS") | .key'); do
            kvkey=$(echo "$key" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
            val=$(echo "$ALL_SECRETS" | jq -r --arg k "$key" '.[$k]')
            az keyvault secret set --vault-name $KEY_VAULT --name "$kvkey" --value "$val" --output none
          done

  # Step 3: Build Docker image and push to ACR
  docker:
    needs: infra
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and Push image
        id: build
        env:
          REGISTRY: $ENV-${{ secrets.ACR_LOGIN_SERVER }}
          ACR_NAME: $ENV-${{ secrets.ACR_NAME }}
          IMAGE_REPO: ${{ secrets.IMAGE_REPOSITORY }}
        run: |
          IMAGE="$REGISTRY/$IMAGE_REPO:${{ github.sha }}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          az acr login --name $ACR_NAME
          docker build -t $IMAGE .
          docker push $IMAGE

  # Step 4: Deploy Container App
  deploy:
    needs: [docker, keyvault]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure registry credentials for app
        run: |
          CLIENT_ID='${{ needs.infra.outputs.client_id }}'
          CLIENT_SECRET='${{ needs.infra.outputs.client_secret }}'
          az containerapp registry set \
            --name "$ENV-${{ secrets.CONTAINER_APP_NAME }}" \
            --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" \
            --server "$ENV-${{ secrets.ACR_LOGIN_SERVER }}" \
            --username $CLIENT_ID \
            --password $CLIENT_SECRET

      - name: Add secret references to Container App
        env:
          ALL_SECRETS: ${{ toJson(secrets) }}
          APP_NAME: $ENV-${{ secrets.CONTAINER_APP_NAME }}
          RESOURCE_GROUP: $ENV-${{ secrets.RESOURCE_GROUP }}
          KEY_VAULT: $ENV-${{ secrets.KEY_VAULT_NAME }}
        run: |
          for key in $(echo "$ALL_SECRETS" | jq -r 'to_entries[] | select(.key != "AZURE_CREDENTIALS") | .key'); do
            kvkey=$(echo "$key" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
            ref="${kvkey}-ref"
            az containerapp secret set --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" --secrets "$ref=@Microsoft.KeyVault(VaultName=$KEY_VAULT;SecretName=$kvkey)" --output none
          done
          env_args=""
          for key in $(echo "$ALL_SECRETS" | jq -r 'to_entries[] | select(.key != "AZURE_CREDENTIALS") | .key'); do
            kvkey=$(echo "$key" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
            ref="${kvkey}-ref"
            env_args="$env_args $key=secretref:$ref"
          done
          az containerapp update --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" --set-env-vars $env_args --output none

      - name: Deploy new image
        run: |
          IMAGE="${{ needs.docker.outputs.image }}"
          az containerapp update \
            --name "$ENV-${{ secrets.CONTAINER_APP_NAME }}" \
            --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" \
            --image $IMAGE
          URL=$(az containerapp show --name "$ENV-${{ secrets.CONTAINER_APP_NAME }}" --resource-group "$ENV-${{ secrets.RESOURCE_GROUP }}" --query properties.configuration.ingress.fqdn -o tsv)
          echo "Application URL: https://$URL"
          echo "Image SHA: $IMAGE"
